if (y==1)  Cohort [y,1]<-Get.Age1.Recruits(S=S2011, a = alpha, b = beta)
if (y==2)  Cohort [y,1]<-Get.Age1.Recruits(S=S2012, a = alpha, b = beta)
if (y==3)  Cohort [y,1]<-Get.Age1.Recruits(S=S2013, a = alpha, b = beta)
if (y==4)  Cohort [y,1]<-Get.Age1.Recruits(S=S2014, a = alpha, b = beta)
if (y==5)  Cohort [y,1]<-Get.Age1.Recruits(S=S2015, a = alpha, b = beta)
if (y > 5)  Cohort[y,1]<-Get.Age1.Recruits(S=sum(Escape[y-1,],na.rm=T), a = alpha, b = beta)
# Apply preterminal fishing
Catch_PT[y,] <- PT_ER * Cohort[y,]
# Remove PT catch from the population
Cohort[y,]<- Cohort_After_PT[y,] - Catch_PT[y,]
# Apply maturation to calculate terminal run size
TermRun[y,] <-  Cohort_After_PT[y,] * matRate
# Now remove these from population
Cohort_After_Mature[y,] <- Cohort_After_PT[y,]   -  TermRun[y,]
# Apply terminal fishing
Catch_T[y,] <- T_ER * TermRun[y,]
# Calculate Escapement
Escape[y,] <- TermRun[y,] - Catch_T[y,]
} # end year loop
Cohort
S2011<-5154
S2012<-11399
S2013<-7142
S2014<-24648
S2015<-11422
# Recursive Bayes parameter estimates
alpha<-1.25
beta<-15213
# Stationary model to CTC outputs
#alpha<-1.45
#beta<-31221.73
nYears <- 25
nAges<- 5 # ages 1, 2, 3, 4, 5
# Maturation rates
matRate<-c(0, 0, 0.02, 0.93, 1) # ages = 2,3,4,5
# Pre-terminal (PT) and Terminal (T) exploitation rates, by age
PT_ER<-c(0, 0.003, 0.004231, 0.05011, 0.09375)
T_ER<-c(0, 0, 0.1111, 0.138221, 0.141157)
#PT_ER<-c(0, 0, 0.00014594, 0.043478, 0.043478) # ages 2, 3, 4, 5; based on 2016, but with age 5 set equal to age 4
#T_ER<-c(0, 0, 0, 0.183, 0.183) # ages 2, 3, 4, 5; based on 2015 run reconstruction, but with age 5 set equal to age 4
#PT_ER<-c(0, 0, 0, 0, 0)
#T_ER<-c(0, 0, 0, 0, 0)
survRate<-c(0.5, 0.6, 0.7, 0.8, 0.9) # age 1, 2, 3, 4, 5
# State variables
Cohort<-array(dim=c(nYears, nAges))
Cohort_After_PT <- array(dim=c(nYears, nAges))
Cohort_After_Mature <- array(dim=c(nYears, nAges))
Escape<-array(dim=c(nYears, nAges))
TermRun<-array(dim=c(nYears, nAges))
Catch_PT<-array(dim=c(nYears, nAges))
Catch_T<-array(dim=c(nYears, nAges))
popDyn<-function() {
for (y in 1:nYears) {
# Note: Need to think about order of overwinter survival and recruitment; does survival age 1 mean survival from age 1 to age 2????
# Apply overwinter survival and advance age forward a year
if (y > 1) {
for (a in 2:nAges) {
Cohort[y,a] <- Cohort_After_Mature[y-1, a-1] * survRate[a]
}
}
# Calculate recruitment, with first 5 years initialized at observed escapement levels for 2011-2015
if (y==1)  Cohort [y,1]<-Get.Age1.Recruits(S=S2011, a = alpha, b = beta)
if (y==2)  Cohort [y,1]<-Get.Age1.Recruits(S=S2012, a = alpha, b = beta)
if (y==3)  Cohort [y,1]<-Get.Age1.Recruits(S=S2013, a = alpha, b = beta)
if (y==4)  Cohort [y,1]<-Get.Age1.Recruits(S=S2014, a = alpha, b = beta)
if (y==5)  Cohort [y,1]<-Get.Age1.Recruits(S=S2015, a = alpha, b = beta)
if (y > 5)  Cohort[y,1]<-Get.Age1.Recruits(S=sum(Escape[y-1,],na.rm=T), a = alpha, b = beta)
# Apply preterminal fishing
Catch_PT[y,] <- PT_ER * Cohort[y,]
# Remove PT catch from the population
Cohort[y,]<- Cohort_After_PT[y,] - Catch_PT[y,]
# Apply maturation to calculate terminal run size
TermRun[y,] <-  Cohort_After_PT[y,] * matRate
# Now remove these from population
Cohort_After_Mature[y,] <- Cohort_After_PT[y,]   -  TermRun[y,]
# Apply terminal fishing
Catch_T[y,] <- T_ER * TermRun[y,]
# Calculate Escapement
Escape[y,] <- TermRun[y,] - Catch_T[y,]
} # end year loop
for (y in 1:nYears) {
# Note: Need to think about order of overwinter survival and recruitment; does survival age 1 mean survival from age 1 to age 2????
# Apply overwinter survival and advance age forward a year
if (y > 1) {
for (a in 2:nAges) {
Cohort[y,a] <- Cohort_After_Mature[y-1, a-1] * survRate[a]
}
}
# Calculate recruitment, with first 5 years initialized at observed escapement levels for 2011-2015
if (y==1)  Cohort [y,1]<-Get.Age1.Recruits(S=S2011, a = alpha, b = beta)
if (y==2)  Cohort [y,1]<-Get.Age1.Recruits(S=S2012, a = alpha, b = beta)
if (y==3)  Cohort [y,1]<-Get.Age1.Recruits(S=S2013, a = alpha, b = beta)
if (y==4)  Cohort [y,1]<-Get.Age1.Recruits(S=S2014, a = alpha, b = beta)
if (y==5)  Cohort [y,1]<-Get.Age1.Recruits(S=S2015, a = alpha, b = beta)
if (y > 5)  Cohort[y,1]<-Get.Age1.Recruits(S=sum(Escape[y-1,],na.rm=T), a = alpha, b = beta)
# Apply preterminal fishing
Catch_PT[y,] <- PT_ER * Cohort[y,]
# Remove PT catch from the population
Cohort[y,]<- Cohort_After_PT[y,] - Catch_PT[y,]
# Apply maturation to calculate terminal run size
TermRun[y,] <-  Cohort_After_PT[y,] * matRate
# Now remove these from population
Cohort_After_Mature[y,] <- Cohort_After_PT[y,]   -  TermRun[y,]
# Apply terminal fishing
Catch_T[y,] <- T_ER * TermRun[y,]
# Calculate Escapement
Escape[y,] <- TermRun[y,] - Catch_T[y,]
} # end year loop
Cohort
y
y<-1
# Calculate recruitment, with first 5 years initialized at observed escapement levels for 2011-2015
if (y==1)  Cohort [y,1]<-Get.Age1.Recruits(S=S2011, a = alpha, b = beta)
COhort
Cohort
if (y==2)  Cohort [y,1]<-Get.Age1.Recruits(S=S2012, a = alpha, b = beta)
Cohort
y
y<-2
if (y==2)  Cohort [y,1]<-Get.Age1.Recruits(S=S2012, a = alpha, b = beta)
Cohort
for (y in 1:nYears) {
# Note: Need to think about order of overwinter survival and recruitment; does survival age 1 mean survival from age 1 to age 2????
# Apply overwinter survival and advance age forward a year
if (y > 1) {
for (a in 2:nAges) {
Cohort[y,a] <- Cohort_After_Mature[y-1, a-1] * survRate[a]
}
}
# Calculate recruitment, with first 5 years initialized at observed escapement levels for 2011-2015
if (y==1)  Cohort [y,1]<-Get.Age1.Recruits(S=S2011, a = alpha, b = beta)
if (y==2)  Cohort [y,1]<-Get.Age1.Recruits(S=S2012, a = alpha, b = beta)
if (y==3)  Cohort [y,1]<-Get.Age1.Recruits(S=S2013, a = alpha, b = beta)
if (y==4)  Cohort [y,1]<-Get.Age1.Recruits(S=S2014, a = alpha, b = beta)
if (y==5)  Cohort [y,1]<-Get.Age1.Recruits(S=S2015, a = alpha, b = beta)
if (y > 5)  Cohort[y,1]<-Get.Age1.Recruits(S=sum(Escape[y-1,],na.rm=T), a = alpha, b = beta)
# Apply preterminal fishing
Catch_PT[y,] <- PT_ER * Cohort[y,]
# Remove PT catch from the population
Cohort_After_PT[y,]<- Cohort[y,] - Catch_PT[y,]
# Apply maturation to calculate terminal run size
TermRun[y,] <-  Cohort_After_PT[y,] * matRate
# Now remove these from population
Cohort_After_Mature[y,] <- Cohort_After_PT[y,]   -  TermRun[y,]
# Apply terminal fishing
Catch_T[y,] <- T_ER * TermRun[y,]
# Calculate Escapement
Escape[y,] <- TermRun[y,] - Catch_T[y,]
} # end year loop
Cohort
matRate
5/8
install.packages("doParallel")
install.packages("foreach")
install.packages("foreach")
debug(utils:::unpackPkgZip)
install.packages("foreach")
library(foreach)
library(parallel)
library(doParallel)
100/(1-0.1)
6*150
install.packages("plotrix")
install.packages("plotrix")
install.packages("plotrix")
library(plotrix)
library(R2jags)
install.packages("R2jags")
install.packages("grDevices")
install.packages("grDevices")
source("functions.R")
library(grDevices)
library(plotrix)
library(R2jags)
library(modeest)
library(gplots)
install.packages("modeest")
install.packages("gplots")
library(grDevices)
library(plotrix)
library(R2jags)
library(modeest)
library(gplots)
install.packages("dplyr")
library(dplyr)
install.packages("tidyr")
1 - pnorm(75, 50, 10)
1 - pnorm(75, 50, 20)
rnorm(20, 50,20)
rnorm(10'0, 50,20)
rnorm(100, 50,20)
xx<-rnorm(100, 50,20)
hist(xx)
x <- 0:200
sum(((x-50)^2)/2*20^2 )
sumexp((((x-50)^2)/2*20^2 ))
sum(exp(-((x-50)^2)/2*20^2 ))
x <- 75:1000
sum(exp(-((x-50)^2)/2*20^2 ))
exp(-((75-50)^2)/2*20^2 )
1 - pnorm(minVuln, mu, sigma)
(75-50)^2)/2*20^2
(75-50)^2)/(2*20^2)
((75-50)^2)/(2*20^2)
?pnorm
1 - pnorm(75, 50, 20)
37.5-18.725
112.5/7.5
# Clear environment
rm(list=ls())
#set.seed(123)
# Read in Repo. Dir. from R base folder
setwd("C:/~")
Dir <- readLines("CN_MSE_Dir.txt")
# navigate to this project's folder
Proj <- "CN_MSE_Simulator"
setwd(paste(Dir, Proj, sep="/"))
# Specify which data folder to use
DataFolder<-"DataIn_AABM"
# Load packages
library(dplyr)
# Source functions, which are in base folder
FuncPath <- paste(Dir, Proj, "R/Functions.R", sep="/") # main functions for simulation routine
pFuncPath <- paste(Dir, Proj, "R/plottingFunctions.R", sep="/") # functions to make plots
hFuncPath <- paste(Dir, Proj, "R/helperFunctions.R", sep="/") # helper functions that are called from the simulation routine
sFuncPath <- paste(Dir, Proj, "R/setupFunctions.R", sep="/") # functions that help set-up the simulation routine (initialze arrays, read-in data)
statsFuncPath <- paste(Dir, Proj, "R/statsFunctions.R", sep="/") # functions that help set-up the simulation routine (initialze arrays, read-in data)
source(FuncPath)
source(pFuncPath)
source(hFuncPath)
source(sFuncPath)
source(statsFuncPath)
Run <- "AABM_Sept21"
PlotName="AI_4Panel"
Mods2Plot_1 = c(1,2,3); Mods2Plot_2 = c(1,4,5,6,7,8,9); Mods2Plot_3 = c(10,11,12);
Mods2Plot_4 = c(13,14,15,16,17,18); Scenarios = "Fishing_Habitat"; BiasNums=c(15,25,50)
# Read in blobs
Blobs <- list()
AI <- list()
for(mm in 1:length(Names)){
Blobs[[mm]] <- readRDS(paste("DataOut/", Names[mm], ".rds", sep=""))
AI[[mm]] <- Blobs[[mm]]$Sims$AI
}
cols <- c("#0000ff", "#b22222", "#006400", "#FF9937","#7F3DCC",  "#808080")
#  Blue, Green, Red, Orange, Purple, grey
TGrey <- "#80808050"
pdf(paste("Figures/", PlotName ,".pdf", sep=""))
par(mfrow=c(2,2), oma=c(2,3,2,1), mar=c(2,2,2,1))
dev.off()
# Read in blobs
Blobs <- list()
AI <- list()
for(mm in 1:length(Names)){
Blobs[[mm]] <- readRDS(paste("DataOut/", Names[mm], ".rds", sep=""))
AI[[mm]] <- Blobs[[mm]]$Sims$AI
}
cols <- c("#0000ff", "#b22222", "#006400", "#FF9937","#7F3DCC",  "#808080")
#  Blue, Green, Red, Orange, Purple, grey
TGrey <- "#80808050"
MyMean <- list()
MySD <- list()
# first store all model data so can get ylims
for(mm in 1:length(Blobs)){
# Not get mean and SD across model runs
MyMean[[mm]] <-  sapply(1:NY, function(x) mean(sapply(AI[[mm]], "[", x) ))
MySD[[mm]] <- sapply(1:NY, function(x) sd(sapply(AI[[mm]], "[", x) ))
} # end mod loop
# remove initialization years
Years_To_Plot <- Years[-(1:MaxAge)]
MyMean <- lapply(MyMean, "[", which(Years %in% Years_To_Plot))
MySD <- lapply(MySD, "[", which(Years %in% Years_To_Plot))
Stocks <- Blobs[[1]]$Data$StocksInfo$StockID
Years <- Blobs[[1]]$Options$Years
NY <- Blobs[[1]]$Data$NY
MaxAge <- Blobs[[1]]$Data$MaxAge
cols <- c("#0000ff", "#b22222", "#006400", "#FF9937","#7F3DCC",  "#808080")
#  Blue, Green, Red, Orange, Purple, grey
TGrey <- "#80808050"
MyMean <- list()
MySD <- list()
# first store all model data so can get ylims
for(mm in 1:length(Blobs)){
# Not get mean and SD across model runs
MyMean[[mm]] <-  sapply(1:NY, function(x) mean(sapply(AI[[mm]], "[", x) ))
MySD[[mm]] <- sapply(1:NY, function(x) sd(sapply(AI[[mm]], "[", x) ))
} # end mod loop
# remove initialization years
Years_To_Plot <- Years[-(1:MaxAge)]
MyMean <- lapply(MyMean, "[", which(Years %in% Years_To_Plot))
MySD <- lapply(MySD, "[", which(Years %in% Years_To_Plot))
Years <- Blobs[[1]]$Options$Years
Names
Names <- readRDS(paste("DataOut/Scenario_Names_", Run, ".RDS", sep=""))
# Read in blobs
Blobs <- list()
AI <- list()
for(mm in 1:length(Names)){
Blobs[[mm]] <- readRDS(paste("DataOut/", Names[mm], ".rds", sep=""))
AI[[mm]] <- Blobs[[mm]]$Sims$AI
}
Stocks <- Blobs[[1]]$Data$StocksInfo$StockID
Years <- Blobs[[1]]$Options$Years
NY <- Blobs[[1]]$Data$NY
MaxAge <- Blobs[[1]]$Data$MaxAge
cols <- c("#0000ff", "#b22222", "#006400", "#FF9937","#7F3DCC",  "#808080")
#  Blue, Green, Red, Orange, Purple, grey
TGrey <- "#80808050"
MyMean <- list()
MySD <- list()
# first store all model data so can get ylims
for(mm in 1:length(Blobs)){
# Not get mean and SD across model runs
MyMean[[mm]] <-  sapply(1:NY, function(x) mean(sapply(AI[[mm]], "[", x) ))
MySD[[mm]] <- sapply(1:NY, function(x) sd(sapply(AI[[mm]], "[", x) ))
} # end mod loop
# remove initialization years
Years_To_Plot <- Years[-(1:MaxAge)]
MyMean <- lapply(MyMean, "[", which(Years %in% Years_To_Plot))
MySD <- lapply(MySD, "[", which(Years %in% Years_To_Plot))
ylims <- c( 0 , max( unlist(MyMean) + unlist(MySD), na.rm=T))
# Plot
#**************************************************
# Panel 1 -- Basic Ricker with 4 fishing scenarios OR smolt release scenarios
Cols <- c("#000000", cols[1:3])
# start with leadin and inits
plot(x=NA, y=NA, col="darkgrey", type="l", ylim=ylims, xlim=c(min(Years_To_Plot), max(Years_To_Plot)), lwd=2, ann=F)
# Now add model fits
for(mm in 1:length(Mods2Plot_1)){
lines(Years_To_Plot, MyMean[[Mods2Plot_1[mm]]], col=Cols[mm], lwd=2)
# end mods loop
# Add tranparent error bars
polygon(y=c(MyMean[[Mods2Plot_1[mm]]] - MySD[[Mods2Plot_1[mm]]], rev(MyMean[[Mods2Plot_1[mm]]] + MySD[[Mods2Plot_1[mm]]])),
x=c(Years_To_Plot, rev(Years_To_Plot)), col= paste(Cols[mm], 50, sep=""), border=Cols[mm])
} # end mod loop
# add Lines for capacity, Smax
if(Scenarios=="Fishing_Habitat"){
legend("topleft", col=c(Cols),
legend=c("Current", "50% Curr.", "50% Curr. PT", "No Fishing"), title="Fishing Scenario",
bty="n", cex=0.8, lwd=2, lty=c(1,1,1,1))
} else if(Scenarios=="Bias_Smolts"){
legend("topright", col=c(Cols),
legend=c("Current", "150% Curr.", "150% Curr. 2026"), title="Smolt Release Scenario",
bty="n", cex=0.8, lwd=2, lty=c(1,1,1))
}
mtext(side=2, line=3, text="Historical Productivity")
Scenarios="Bias_Smolts"
# Get ylims
ylims <- c( 0 , max( unlist(MyMean) + unlist(MySD), na.rm=T))
# Plot
#**************************************************
# Panel 1 -- Basic Ricker with 4 fishing scenarios OR smolt release scenarios
Cols <- c("#000000", cols[1:3])
# start with leadin and inits
plot(x=NA, y=NA, col="darkgrey", type="l", ylim=ylims, xlim=c(min(Years_To_Plot), max(Years_To_Plot)), lwd=2, ann=F)
# Now add model fits
for(mm in 1:length(Mods2Plot_1)){
lines(Years_To_Plot, MyMean[[Mods2Plot_1[mm]]], col=Cols[mm], lwd=2)
# end mods loop
# Add tranparent error bars
polygon(y=c(MyMean[[Mods2Plot_1[mm]]] - MySD[[Mods2Plot_1[mm]]], rev(MyMean[[Mods2Plot_1[mm]]] + MySD[[Mods2Plot_1[mm]]])),
x=c(Years_To_Plot, rev(Years_To_Plot)), col= paste(Cols[mm], 50, sep=""), border=Cols[mm])
} # end mod loop
# add Lines for capacity, Smax
if(Scenarios=="Fishing_Habitat"){
legend("topleft", col=c(Cols),
legend=c("Current", "50% Curr.", "50% Curr. PT", "No Fishing"), title="Fishing Scenario",
bty="n", cex=0.8, lwd=2, lty=c(1,1,1,1))
} else if(Scenarios=="Bias_Smolts"){
legend("topright", col=c(Cols),
legend=c("Current", "150% Curr.", "150% Curr. 2026"), title="Smolt Release Scenario",
bty="n", cex=0.8, lwd=2, lty=c(1,1,1))
}
mtext(side=2, line=3, text="Historical Productivity")
Cols <- c("#000000", rep(cols[4:6],each=2))
# start with leadin and inits
plot(x=NA, y=NA, col="darkgrey", type="l", ylim=ylims, xlim=c(min(Years_To_Plot), max(Years_To_Plot)), lwd=2, ann=F)
# Now add model fits
for(mm in 1:length(Mods2Plot_2)){
lines(Years_To_Plot, MyMean[[Mods2Plot_2[mm]]], col=Cols[mm], lwd=2, , lty=c(1,1,2,1,2,1,2))
# end mods loop
# Add tranparent error bars
polygon(y=c(MyMean[[Mods2Plot_2[mm]]] - MySD[[Mods2Plot_2[mm]]], rev(MyMean[[Mods2Plot_2[mm]]] + MySD[[Mods2Plot_2[mm]]])),
x=c(Years_To_Plot, rev(Years_To_Plot)), col= paste(Cols[mm], 50, sep=""), border=Cols[mm])
} # end mod loop
if(Scenarios=="Fishing_Habitat"){
legend("topleft", col=Cols, legend=c("No Change", "Prod. 25%", "CC 25%"  ),
title="Habitat Scenario", bty="n", cex=0.8, lwd=2, lty=c(1,1,1))
} else if(Scenarios=="Bias_Smolts"){
legend("topright", col= c(Cols, Cols[2:3]), legend=c("No Bias", paste( "+", BiasNums ,"%",sep=""), paste( "-", BiasNums ,"%",sep="")  ),
title="AI Bias Scenario", bty="n", cex=0.8, lwd=2, lty=c(1,1,2,1,2,1,2))
}
Cols <- c("#000000", rep(cols[4:6],each=2))
# start with leadin and inits
plot(x=NA, y=NA, col="darkgrey", type="l", ylim=ylims, xlim=c(min(Years_To_Plot), max(Years_To_Plot)), lwd=2, ann=F)
# Now add model fits
for(mm in 1:length(Mods2Plot_2)){
lines(Years_To_Plot, MyMean[[Mods2Plot_2[mm]]], col=Cols[mm], lwd=2, lty=c(1,1,2,1,2,1,2))
# end mods loop
# Add tranparent error bars
polygon(y=c(MyMean[[Mods2Plot_2[mm]]] - MySD[[Mods2Plot_2[mm]]], rev(MyMean[[Mods2Plot_2[mm]]] + MySD[[Mods2Plot_2[mm]]])),
x=c(Years_To_Plot, rev(Years_To_Plot)), col= paste(Cols[mm], 50, sep=""), border=Cols[mm])
} # end mod loop
Mods2Plot_2
Cols <- c("#000000", rep(cols[4:6],each=2))
ltys <- c(1,1,2,1,2,1,2)
# start with leadin and inits
plot(x=NA, y=NA, col="darkgrey", type="l", ylim=ylims, xlim=c(min(Years_To_Plot), max(Years_To_Plot)), lwd=2, ann=F)
# Now add model fits
for(mm in 1:length(Mods2Plot_2)){
lines(Years_To_Plot, MyMean[[Mods2Plot_2[mm]]], col=Cols[mm], lwd=2, lty=ltys[mm])
# end mods loop
# Add tranparent error bars
polygon(y=c(MyMean[[Mods2Plot_2[mm]]] - MySD[[Mods2Plot_2[mm]]], rev(MyMean[[Mods2Plot_2[mm]]] + MySD[[Mods2Plot_2[mm]]])),
x=c(Years_To_Plot, rev(Years_To_Plot)), col= paste(Cols[mm], 50, sep=""), border=Cols[mm])
} # end mod loop
source(pFuncPath)
AI_4_Panel(Names, PlotName="AI_4Panel",
Mods2Plot_1 = c(1,2,3), Mods2Plot_2 = c(1,4,5,6,7,8,9), Mods2Plot_3 = c(10,11,12),
Mods2Plot_4 = c(13,14,15,16,17,18), Scenarios = "Fishing_Habitat", BiasNums=c(15,25,50))
AI_4_Panel(Names, PlotName="AI_4Panel",
Mods2Plot_1 = c(1,2,3), Mods2Plot_2 = c(1,4,5,6,7,8,9), Mods2Plot_3 = c(10,11,12),
Mods2Plot_4 = c(13,14,15,16,17,18), Scenarios = "Bias_Smolts", BiasNums=c(15,25,50))
source(pFuncPath)
AI_4_Panel(Names, PlotName="AI_4Panel",
Mods2Plot_1 = c(1,2,3), Mods2Plot_2 = c(1,4,5,6,7,8,9), Mods2Plot_3 = c(10,11,12),
Mods2Plot_4 = c(13,14,15,16,17,18), Scenarios = "Bias_Smolts", BiasNums=c(15,25,50))
dev.off()
dev.off()
dev.off()
library(ggplot2)
library(TMB)
library(reshape)
library(dplyr)
library(TMBhelper)
source("TMB_functions.R")
#read in simple data set
SR <- read.csv("../data/Harrison_simples_Apr18.csv")
cd("Harrison SR Analysis")
setwd("Harrison SR Analysis")
#read in simple data set
SR <- read.csv("../data/Harrison_simples_Apr18.csv")
getwd()
#read in simple data set
SR <- read.csv("data/Harrison_simples_Apr18.csv")
# Compile and load all TMB models before load tmbstan -- sometimes causes problems
# Simple Ricker
#dyn.unload(dynlib("Ricker_simple"))
#compile("../R/Ricker_simple.cpp",libtmb=FALSE, "-O1 -g", DLLFLAGS="")
dyn.load(dynlib("Ricker_simple"))
# Compile and load all TMB models before load tmbstan -- sometimes causes problems
# Simple Ricker
#dyn.unload(dynlib("Ricker_simple"))
#compile("../R/Ricker_simple.cpp",libtmb=FALSE, "-O1 -g", DLLFLAGS="")
dyn.load(dynlib("R/Ricker_simple"))
# load this after compile, since can mess with compiling for some reason
library(tmbstan)
iteracs=100000
# LM version
srm <- lm(log(SR$R/SR$S_adj)~ SR$S_adj)
a_srm <- srm$coefficients[1]
b_srm <- -srm$coefficients[2]
summary(srm)
par(mfrow=c(2,2))
plot(srm)
#==========================================================
# TMB simple Ricker
# Scale Data so that it is close to 0, which helps with convergence in TMB
Scale <- 100000
mydata<-list(obs_R=SR$R/Scale,obs_S=SR$S_adj/Scale)
parameters_simple <- list(
a=(a_srm),
logbeta = log(b_srm*Scale),
logSigObs= log(.4)  )
# also bound beta so that Smax is between 1 Spawner and 4*maximum observed
Min_S_Obs <- 1/Scale
Max_S_Obs <- max(SR$S_adj)/Scale
Min_LogB <- log(1/(Max_S_Obs*4))
Max_LogB <- log(1/(Min_S_Obs))
# create vector of bounds
#           a      logbeta   logSigObs
lower <- c(-Inf,   Min_LogB, -Inf)
upper <- c(Inf,    Max_LogB,  Inf)
obj<-MakeADFun(mydata,parameters_simple,random=NULL,DLL="Ricker_simple")
newtonOption(obj, smartsearch=FALSE)
opt<-nlminb(obj$par,obj$fn,obj$gr,  lower=lower, upper = upper)
# pull out estimates from ML fit
# Create Table of outputs
All_Ests <- data.frame(summary(sdreport(obj)))
All_Ests$Param <- row.names(All_Ests)
All_Ests
# Add column with upper and lower CIs
All_Ests <- All_Ests %>% mutate(Lower = Estimate-1.96*Std..Error, Upper = Estimate+1.96*Std..Error)
All_Ests[All_Ests$Param == "beta", c("Estimate", "Std..Error", "Lower", "Upper")] <- All_Ests[ All_Ests$Param == "beta", c("Estimate", "Std..Error", "Lower", "Upper")]/Scale
All_Ests[All_Ests$Param == "Smax", c("Estimate", "Std..Error", "Lower", "Upper")] <- All_Ests[ All_Ests$Param == "Smax", c("Estimate", "Std..Error", "Lower", "Upper")]*Scale
#diagnosticts
qqnorm(obj$report()$residuals)
abline(0,1)
# Look at residuals
SRdiagsimple <- SR
SRdiagsimple$residuals <- obj$report()$residuals
SRdiagsimple$std_resids <- obj$report()$std_resids
SRdiagsimple$model <- "Simple Ricker"
SRdiagsimple$alpha <- obj$report()$alpha
SRdiagsimple$std_resids
acf(SRdiagsimple$std_resids)
dev.off()
acf(SRdiagsimple$std_resids)
acf(SRdiagsimple$residuals)
pdf("Figures/Simple_Ricker_ACF.pdf")
acf(SRdiagsimple$std_resids)
dev.off()
acf(SRdiagsimple$std_resids, lag.max = 4)
